/**
 * Automatically generated by Zserio C++ extension version 2.0.0-pre1.
 */

#ifndef PMR_POC_SAMPLE_STRUCT_H
#define PMR_POC_SAMPLE_STRUCT_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/pmr/String.h>
#include <zserio/pmr/Vector.h>
#include <zserio/pmr/BitBuffer.h>
#include <zserio/pmr/UniquePtr.h>
#include <zserio/OptionalHolder.h>
#include <zserio/Types.h>
#include <zserio/Arrays.h>

#include <pmr_poc/BigStruct.h>
#include <pmr_poc/ChildStruct.h>
#include <pmr_poc/StringStruct.h>

namespace pmr_poc
{

class SampleStruct
{
public:
    explicit SampleStruct(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator =
                        ::zserio::pmr::PolymorphicAllocator<void>());

    ~SampleStruct() = default;

    SampleStruct(const SampleStruct&) = default;
    SampleStruct& operator=(const SampleStruct&) = default;

    SampleStruct(SampleStruct&&) = default;
    SampleStruct& operator=(SampleStruct&&) = default;

    uint16_t getUint16Field() const;

    const ::zserio::pmr::string& getStringField() const;

    const ::zserio::pmr::BitBuffer& getExternField() const;

    const ::pmr_poc::BigStruct& getInplaceOptionalField() const;
    bool hasInplaceOptionalField() const;

    const ::pmr_poc::StringStruct& getHeapOptionalField() const;
    bool hasHeapOptionalField() const;

    const ::zserio::pmr::vector<::pmr_poc::ChildStruct>& getChildField() const;

    size_t bitSizeOf(size_t bitPosition = 0) const;

    bool operator==(const SampleStruct& other) const;
    int hashCode() const;

private:
    class ElementFactory_childField;

    uint16_t readUint16Field(::zserio::BitStreamReader& in);
    ::zserio::pmr::string readStringField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);
    ::zserio::pmr::BitBuffer readExternField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);
    ::zserio::OptionalHolder<::pmr_poc::BigStruct> readInplaceOptionalField(::zserio::BitStreamReader& in);
    ::zserio::pmr::unique_ptr<::pmr_poc::StringStruct> readHeapOptionalField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);
    ::zserio::pmr::vector<::pmr_poc::ChildStruct> readChildField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);

    uint16_t m_uint16Field_;
    ::zserio::pmr::string m_stringField_;
    ::zserio::pmr::BitBuffer m_externField_;
    ::zserio::OptionalHolder<::pmr_poc::BigStruct> m_inplaceOptionalField_;
    ::zserio::pmr::unique_ptr<::pmr_poc::StringStruct> m_heapOptionalField_;
    ::zserio::pmr::vector<::pmr_poc::ChildStruct> m_childField_;
};

} // namespace pmr_poc

#endif // PMR_POC_SAMPLE_STRUCT_H
