/**
 * Automatically generated by Zserio C++ extension version 2.0.0-pre1.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <pmr_poc/BigStruct.h>

namespace pmr_poc
{

BigStruct::BigStruct(::zserio::BitStreamReader& in) :
        m_field1_(readField1(in)),
        m_field2_(readField2(in)),
        m_field3_(readField3(in)),
        m_field4_(readField4(in)),
        m_field5_(readField5(in)),
        m_field6_(readField6(in)),
        m_field7_(readField7(in)),
        m_field8_(readField8(in))
{
}

uint64_t BigStruct::getField1() const
{
    return m_field1_;
}

uint64_t BigStruct::getField2() const
{
    return m_field2_;
}

uint64_t BigStruct::getField3() const
{
    return m_field3_;
}

uint64_t BigStruct::getField4() const
{
    return m_field4_;
}

uint64_t BigStruct::getField5() const
{
    return m_field5_;
}

uint64_t BigStruct::getField6() const
{
    return m_field6_;
}

uint64_t BigStruct::getField7() const
{
    return m_field7_;
}

uint64_t BigStruct::getField8() const
{
    return m_field8_;
}

size_t BigStruct::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);
    endBitPosition += UINT8_C(64);

    return endBitPosition - bitPosition;
}

bool BigStruct::operator==(const BigStruct& other) const
{
    if (this != &other)
    {
        return
                (m_field1_ == other.m_field1_) &&
                (m_field2_ == other.m_field2_) &&
                (m_field3_ == other.m_field3_) &&
                (m_field4_ == other.m_field4_) &&
                (m_field5_ == other.m_field5_) &&
                (m_field6_ == other.m_field6_) &&
                (m_field7_ == other.m_field7_) &&
                (m_field8_ == other.m_field8_);
    }

    return true;
}

int BigStruct::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_field1_);
    result = ::zserio::calcHashCode(result, m_field2_);
    result = ::zserio::calcHashCode(result, m_field3_);
    result = ::zserio::calcHashCode(result, m_field4_);
    result = ::zserio::calcHashCode(result, m_field5_);
    result = ::zserio::calcHashCode(result, m_field6_);
    result = ::zserio::calcHashCode(result, m_field7_);
    result = ::zserio::calcHashCode(result, m_field8_);

    return result;
}

uint64_t BigStruct::readField1(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField2(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField3(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField4(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField5(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField6(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField7(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

uint64_t BigStruct::readField8(::zserio::BitStreamReader& in)
{
    return static_cast<uint64_t>(in.readBits64(UINT8_C(64)));
}

} // namespace pmr_poc
